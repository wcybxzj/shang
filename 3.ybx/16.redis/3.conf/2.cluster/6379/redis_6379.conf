port 6379

#单位微秒 10000微秒=0.01秒
slowlog-log-slower-than 20000

#slow log 是列表类型 长度128
slowlog-max-len 128
# Generated by CONFIG REWRITE
dir "./"

#单位字节 1024*1024*1024 = 1G
maxmemory 1953125kb

#对应的配置规则是：
#client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#客户端类型，分为三种。a）normal：普通客户端；b）slave：slave客户端，用于复制；c）pubsub：发布订阅客户端。
#<hard limit>：如果客户端使用的输出缓冲区大于<hard limit>，客户端会被立即关闭。
#<soft limit>和<soft seconds>：如果客户端使用的输出缓冲区超过了<soft limit>并且持续了<soft limit>秒，客户端会被立即关闭。
#限制普通客户端输出缓冲区的，把错误扼杀在摇篮中，例如可以进行如下设置：
client-output-buffer-limit normal 20mb 10mb 120
#适当增大slave的输出缓冲区的，如果master节点写入较大，slave客户端的输出缓冲区可能会比较大，一旦slave客户端连接因为输出缓冲区溢出被kill，会造成复制重连。
client-output-buffer-limit slave 1gb 512mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

#最大客户连接数
maxclients 10000

#检测客户端空闲连接的超时时间，一旦idle时间达到了timeout，客户端将会被关闭，如果设置为0就不进行检测。
#timeout为0 ,0是默认值 ,不检测客户端超时
#客户30秒不发命令就认为超时 ,redis server就会主动关闭连接
timeout 30

#tcp-keepalive：
#检测TCP连接活性的周期，默认值为0，也就是不进行检测，如果需要设置，建议为60，
#那么Redis会每隔60秒对它创建的TCP连接进行活性检测，防止大量死连接占用系统资源。
tcp-keepalive 60

#使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改时，自动触发bgsave。
save 900 1
save 300 10
save 60 10000

################################AOF######################################
#开启AOF功能需要设置配置：appendonly yes，默认不开启。
#AOF文件名通过appendfilename配置设置，默认文件名是appendonly.aof。
#保存路径同RDB持久化方式一致，通过dir配置指定。
appendonly yes

appendfilename "appendonly.aof"

#配置为always时，每次写入都要同步AOF文件，在一般的SATA硬盘上，Redis只能支持大约几百TPS写入，显然跟Redis高性能特性背道而驰，不建议配置。
#配置为no，由于操作系统每次同步AOF文件的周期不可控，而且会加大每次同步硬盘的数据量，虽然提升了性能，但数据安全性无法保证。
#配置为everysec，是建议的同步策略，也是默认配置，做到兼顾性能和数据安全性。理论上只有在系统突然宕机的情况下丢失1秒的数据。（严格来说最多丢失1秒数据是不准确的，5.3节会做具体介绍到。）

#always:数据写入aof_buf立刻调用fsync
#everysec:数据写入aof_buf,有一个单独的线程每秒调用一次fsync
#no:数据写入aof_buf,不主动fsync,让系统自动去fsync
# appendfsync always
appendfsync everysec
#appendfsync no

#子进程根据内存快照，按照命令合并规则写入到新的AOF文件。
#每次批量写入硬盘数据量由配置aof-rewrite-incremental-fsync控制，默认为32MB，
#防止单次刷盘数据过多造成硬盘阻塞。
aof-rewrite-incremental-fsync yes

#对于错误格式的AOF文件，先进行备份，然后采用redis-check-aof--fix命令进行修复，
#修复后使用diff-u对比数据的差异，找出丢失的数据，有些可以人工修改补全。
#
#AOF文件可能存在结尾不完整的情况，比如机器突然掉电导致AOF尾部文件命令写入不全。
#Redis为我们提供了aof-load-truncated配置来兼容这种情况，默认开启。
#加载AOF时，当遇到此问题时会忽略并继续启动，同时打印如下警告日志：
# !!! Warning: short read while loading the AOF file !!!
# # !!! Truncating the AOF at offset 397856725 !!!
# # AOF loaded anyway because aof-load-truncated is enabled
aof-load-truncated yes

#配置no-appendfsync-on-rewrite=yes时，在极端情况下可能丢失整个AOF重写期间的数据，需要根据数据安全性决定是否配置。
#AOF重写时会消耗大量硬盘IO，可以开启配置no-appendfsync-on-rewrite，默认关闭。表示在AOF重写期间不做fsync操作。
#no-appendfsync-on-rewrite yes

################################REPL######################################
#
#Redis采用了乐观复制(optimistic replication)的复制策略，容忍在一定时间内主从库的内容是不同的，但是两者的数据会最终同步。
#具体来说，Redis在主从库之间复制数据的过程本身是异步的，这意味着，主库执行完客户端请求的命令后会立即将命令在主库的执行结果返回给客户端，
#并异步地将命令同步给从库，而不会等待从库接收到该命令后再返回给客户端。
#
#这一特性保证了启用复制后主库的性能不会受到影响，但另一方面也会产生一个主从库数据不一致的时间窗口，当主库执行了一条写命令后，
#主库的数据已经发生的变动，然而在主库将该命令传送给从库之前，如果两个数据库之间的网络连接断开了，此时二者之间的数据就会是不一致的。
#
#从这个角度来看，主库是无法得知某个命令最终同步给了多少个从库的，
#不过 Redis 提供了两个配置选项，来限制只有当数据至少同步给指定数量的从库时，主库才是可写的：
#
#“min-slaves-to-write”表示只有当3个（或以上）的从库连接到主库时，主库才是可写的，否则会返回错误：
#“NOREPLICAS  Not  enough  good  slaves to  write.”
#“min-slaves-max-lag”表示允许从库最长失去连接的时间，
#如果从库最后与主库联系（即发送“replconf  ack”命令）的时间小于这个值，则认为从库还在保持与主库的连接。
#举个例子，按上面的配置，假设主库与3个从库相连，其中一个从库上一次与主库联系是 9 秒前，这时主库可以正常接受写入，
#一旦1秒过后这台从库依旧没有活动，则主库则认为目前连接的从库只有2个，从而拒绝写入。
#这一特性默认是关闭的，在分布式系统中，打开并合理配置该选项后可以降低主从架构中因为网络分区导致的数据不一致的问题。
#
#min-slaves-to-write 3
#min-slaves-max-lag 10

##########################LIST配置#################################################
#redis3.2前用这两个
#list-max-ziplist-entries
#list-max-ziplist-value

#redis3.2用这两个参数
#list-max-ziplist-size
#list-compress-depth

#采取正值的时候，表示节点最多包含几个数据项，即ziplist的长度。当取负值时，只能取-1~-5。
#-5  每个节点ziplist的大小≤64KB字节（bytes）
#-4  32
#-3  16
#-2  8(默认)
#-1  4
list-max-ziplist-size 5

#因为列表很长的时候，最可能被访问的数据是两端的数据，为了节省内存可以压缩，
#参数表示quicklist两端不被压缩的节点个数，采用的压缩算法是LZF，一种无损压缩算法。
#0  不压缩（默认）
#1  quicklist的两端各有一个节点不压缩
#...
#n  quicklist两端各有n个节点不压缩
list-compress-depth 0

##########################HASH配置#################################################
hash-max-ziplist-value 64
hash-max-ziplist-entries 512

############################SET设置####################################################

############################集群###################################################
cluster-enabled yes
#节点超时时间 单位毫秒
cluster-node-timeout 15000
#集群内部配置文件
cluster-config-file "nodes-6379.conf"
#当集群中一个主节点故障只影响它负责的槽的相关命令，不影响其他主节点的可用性page336
cluster-require-full-coverage no
