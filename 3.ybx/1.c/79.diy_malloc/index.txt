资料:
http://blog.codinglabs.org/articles/a-malloc-tutorial.html#3-%E5%AE%9E%E7%8E%B0malloc

支持的API:
void *my_malloc(size_t size);
void *my_calloc(size_t num, size_t size);
void *my_realloc(void *src_data_ptr, size_t size);
void  my_free(void *ptr);
size_t get_malloc_size(void *data_ptr);

支持通过数据指针获取,当前使用大小(像redis如果使用这个做内存使用不用自己维护一个内存块头保存申请的大小)
申请的时候, 内容小于得到的块的大小则分裂
释放时候,将前一个和后一个,如果是未使用的前提下进行合并
所有内存block都在一个双向列表中

非线程安全
只适合64位系统
在分配较大快内存时，考虑使用mmap而非sbrk，这通常更高效
可以根据申请大小 创建多个链表 ，8字节链表、16字节链表、等等。减少碎片，提高查询block的速度
可以给free的block做个单独的链表
